// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
)

// Throwaway variable to avoid unused import error
var (
	_ = &corev1.SecretReference{}
)

// DBSnapshotSpec defines the desired state of DBSnapshot
type DBSnapshotSpec struct {
	DBInstanceIdentifier *string `json:"dbInstanceIdentifier,omitempty"`
	DBSnapshotIdentifier *string `json:"dbSnapshotIdentifier,omitempty"`
	Tags []*Tag `json:"tags,omitempty"`
}

// DBSnapshotStatus defines the observed state of DBSnapshot
type DBSnapshotStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	AllocatedStorage *int64 `json:"allocatedStorage,omitempty"`
	AvailabilityZone *string `json:"availabilityZone,omitempty"`
	DBIResourceID *string `json:"dbiResourceID,omitempty"`
	Encrypted *bool `json:"encrypted,omitempty"`
	Engine *string `json:"engine,omitempty"`
	EngineVersion *string `json:"engineVersion,omitempty"`
	IAMDatabaseAuthenticationEnabled *bool `json:"iamDatabaseAuthenticationEnabled,omitempty"`
	InstanceCreateTime *metav1.Time `json:"instanceCreateTime,omitempty"`
	IOPS *int64 `json:"iops,omitempty"`
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	LicenseModel *string `json:"licenseModel,omitempty"`
	MasterUsername *string `json:"masterUsername,omitempty"`
	OptionGroupName *string `json:"optionGroupName,omitempty"`
	PercentProgress *int64 `json:"percentProgress,omitempty"`
	Port *int64 `json:"port,omitempty"`
	ProcessorFeatures []*ProcessorFeature `json:"processorFeatures,omitempty"`
	SnapshotCreateTime *metav1.Time `json:"snapshotCreateTime,omitempty"`
	SnapshotType *string `json:"snapshotType,omitempty"`
	SourceDBSnapshotIdentifier *string `json:"sourceDBSnapshotIdentifier,omitempty"`
	SourceRegion *string `json:"sourceRegion,omitempty"`
	Status *string `json:"status,omitempty"`
	StorageType *string `json:"storageType,omitempty"`
	TDECredentialARN *string `json:"tdeCredentialARN,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	VPCID *string `json:"vpcID,omitempty"`
}

// DBSnapshot is the Schema for the DBSnapshots API
// +kubebuilder:object:root=true
type DBSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   DBSnapshotSpec   `json:"spec,omitempty"`
	Status DBSnapshotStatus `json:"status,omitempty"`
}

// DBSnapshotList contains a list of DBSnapshot
// +kubebuilder:object:root=true
type DBSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []DBSnapshot `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DBSnapshot{}, &DBSnapshotList{})
}