// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package db_snapshot

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/rds/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.RDS{}
	_ = &svcapitypes.DBSnapshot{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// TODO(jaypipes): Map out the ReadMany codepath

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()
	return &resource{ko}, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateDBSnapshotWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	ko.Status.AllocatedStorage = resp.DBSnapshot.AllocatedStorage
	ko.Status.AvailabilityZone = resp.DBSnapshot.AvailabilityZone
	ko.Status.DBIResourceID = resp.DBSnapshot.DbiResourceId
	ko.Status.Encrypted = resp.DBSnapshot.Encrypted
	ko.Status.Engine = resp.DBSnapshot.Engine
	ko.Status.EngineVersion = resp.DBSnapshot.EngineVersion
	ko.Status.IAMDatabaseAuthenticationEnabled = resp.DBSnapshot.IAMDatabaseAuthenticationEnabled
	ko.Status.InstanceCreateTime = &metav1.Time{*resp.DBSnapshot.InstanceCreateTime}
	ko.Status.IOPS = resp.DBSnapshot.Iops
	ko.Status.KMSKeyID = resp.DBSnapshot.KmsKeyId
	ko.Status.LicenseModel = resp.DBSnapshot.LicenseModel
	ko.Status.MasterUsername = resp.DBSnapshot.MasterUsername
	ko.Status.OptionGroupName = resp.DBSnapshot.OptionGroupName
	ko.Status.PercentProgress = resp.DBSnapshot.PercentProgress
	ko.Status.Port = resp.DBSnapshot.Port
	f18 := []*svcapitypes.ProcessorFeature{}
	for _, f18iter := range resp.DBSnapshot.ProcessorFeatures {
		f18elem := &svcapitypes.ProcessorFeature{}
		f18elem.Name = f18iter.Name
		f18elem.Value = f18iter.Value
		f18 = append(f18, f18elem)
	}
	ko.Status.ProcessorFeatures = f18
	ko.Status.SnapshotCreateTime = &metav1.Time{*resp.DBSnapshot.SnapshotCreateTime}
	ko.Status.SnapshotType = resp.DBSnapshot.SnapshotType
	ko.Status.SourceDBSnapshotIdentifier = resp.DBSnapshot.SourceDBSnapshotIdentifier
	ko.Status.SourceRegion = resp.DBSnapshot.SourceRegion
	ko.Status.Status = resp.DBSnapshot.Status
	ko.Status.StorageType = resp.DBSnapshot.StorageType
	ko.Status.TDECredentialARN = resp.DBSnapshot.TdeCredentialArn
	ko.Status.Timezone = resp.DBSnapshot.Timezone
	ko.Status.VPCID = resp.DBSnapshot.VpcId

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateDBSnapshotInput, error) {
	res := &svcsdk.CreateDBSnapshotInput{}

	res.SetDBInstanceIdentifier(*r.ko.Spec.DBInstanceIdentifier)
	res.SetDBSnapshotIdentifier(*r.ko.Spec.DBSnapshotIdentifier)
	f2 := []*svcsdk.Tag{}
	for _, f2iter := range r.ko.Spec.Tags {
		f2elem := &svcsdk.Tag{}
		f2elem.SetKey(*f2iter.Key)
		f2elem.SetValue(*f2iter.Value)
		f2 = append(f2, f2elem)
	}
	res.SetTags(f2)

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newUpdateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.ModifyDBSnapshotWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	ko.Status.AllocatedStorage = resp.DBSnapshot.AllocatedStorage
	ko.Status.AvailabilityZone = resp.DBSnapshot.AvailabilityZone
	ko.Status.DBIResourceID = resp.DBSnapshot.DbiResourceId
	ko.Status.Encrypted = resp.DBSnapshot.Encrypted
	ko.Status.Engine = resp.DBSnapshot.Engine
	ko.Status.EngineVersion = resp.DBSnapshot.EngineVersion
	ko.Status.IAMDatabaseAuthenticationEnabled = resp.DBSnapshot.IAMDatabaseAuthenticationEnabled
	ko.Status.InstanceCreateTime = &metav1.Time{*resp.DBSnapshot.InstanceCreateTime}
	ko.Status.IOPS = resp.DBSnapshot.Iops
	ko.Status.KMSKeyID = resp.DBSnapshot.KmsKeyId
	ko.Status.LicenseModel = resp.DBSnapshot.LicenseModel
	ko.Status.MasterUsername = resp.DBSnapshot.MasterUsername
	ko.Status.OptionGroupName = resp.DBSnapshot.OptionGroupName
	ko.Status.PercentProgress = resp.DBSnapshot.PercentProgress
	ko.Status.Port = resp.DBSnapshot.Port
	f18 := []*svcapitypes.ProcessorFeature{}
	for _, f18iter := range resp.DBSnapshot.ProcessorFeatures {
		f18elem := &svcapitypes.ProcessorFeature{}
		f18elem.Name = f18iter.Name
		f18elem.Value = f18iter.Value
		f18 = append(f18, f18elem)
	}
	ko.Status.ProcessorFeatures = f18
	ko.Status.SnapshotCreateTime = &metav1.Time{*resp.DBSnapshot.SnapshotCreateTime}
	ko.Status.SnapshotType = resp.DBSnapshot.SnapshotType
	ko.Status.SourceDBSnapshotIdentifier = resp.DBSnapshot.SourceDBSnapshotIdentifier
	ko.Status.SourceRegion = resp.DBSnapshot.SourceRegion
	ko.Status.Status = resp.DBSnapshot.Status
	ko.Status.StorageType = resp.DBSnapshot.StorageType
	ko.Status.TDECredentialARN = resp.DBSnapshot.TdeCredentialArn
	ko.Status.Timezone = resp.DBSnapshot.Timezone
	ko.Status.VPCID = resp.DBSnapshot.VpcId

	return &resource{ko}, nil
}
// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.ModifyDBSnapshotInput, error) {
	res := &svcsdk.ModifyDBSnapshotInput{}

	res.SetDBSnapshotIdentifier(*r.ko.Spec.DBSnapshotIdentifier)
	res.SetEngineVersion(*r.ko.Status.EngineVersion)
	res.SetOptionGroupName(*r.ko.Status.OptionGroupName)

	return res, nil
}


// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteDBSnapshotWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDBSnapshotInput, error) {
	res := &svcsdk.DeleteDBSnapshotInput{}

	res.SetDBSnapshotIdentifier(*r.ko.Spec.DBSnapshotIdentifier)

	return res, nil
}