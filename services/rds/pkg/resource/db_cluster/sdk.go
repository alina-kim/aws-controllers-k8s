// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package db_cluster

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/rds/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.RDS{}
	_ = &svcapitypes.DBCluster{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// TODO(jaypipes): Map out the ReadMany codepath

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()
	return &resource{ko}, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateDBClusterWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	ko.Status.ActivityStreamKinesisStreamName = resp.DBCluster.ActivityStreamKinesisStreamName
	ko.Status.ActivityStreamKMSKeyID = resp.DBCluster.ActivityStreamKmsKeyId
	ko.Status.ActivityStreamMode = resp.DBCluster.ActivityStreamMode
	ko.Status.ActivityStreamStatus = resp.DBCluster.ActivityStreamStatus
	ko.Status.AllocatedStorage = resp.DBCluster.AllocatedStorage
	f5 := []*svcapitypes.DBClusterRole{}
	for _, f5iter := range resp.DBCluster.AssociatedRoles {
		f5elem := &svcapitypes.DBClusterRole{}
		f5elem.FeatureName = f5iter.FeatureName
		f5elem.RoleARN = f5iter.RoleArn
		f5elem.Status = f5iter.Status
		f5 = append(f5, f5elem)
	}
	ko.Status.AssociatedRoles = f5
	ko.Status.BacktrackConsumedChangeRecords = resp.DBCluster.BacktrackConsumedChangeRecords
	ko.Status.Capacity = resp.DBCluster.Capacity
	ko.Status.CloneGroupID = resp.DBCluster.CloneGroupId
	ko.Status.ClusterCreateTime = &metav1.Time{*resp.DBCluster.ClusterCreateTime}
	ko.Status.CrossAccountClone = resp.DBCluster.CrossAccountClone
	f16 := []*string{}
	for _, f16iter := range resp.DBCluster.CustomEndpoints {
		var f16elem string
		f16elem = *f16iter
		f16 = append(f16, &f16elem)
	}
	ko.Status.CustomEndpoints = f16
	f19 := []*svcapitypes.DBClusterMember{}
	for _, f19iter := range resp.DBCluster.DBClusterMembers {
		f19elem := &svcapitypes.DBClusterMember{}
		f19elem.DBClusterParameterGroupStatus = f19iter.DBClusterParameterGroupStatus
		f19elem.DBInstanceIdentifier = f19iter.DBInstanceIdentifier
		f19elem.IsClusterWriter = f19iter.IsClusterWriter
		f19elem.PromotionTier = f19iter.PromotionTier
		f19 = append(f19, f19elem)
	}
	ko.Status.DBClusterMembers = f19
	f20 := []*svcapitypes.DBClusterOptionGroupStatus{}
	for _, f20iter := range resp.DBCluster.DBClusterOptionGroupMemberships {
		f20elem := &svcapitypes.DBClusterOptionGroupStatus{}
		f20elem.DBClusterOptionGroupName = f20iter.DBClusterOptionGroupName
		f20elem.Status = f20iter.Status
		f20 = append(f20, f20elem)
	}
	ko.Status.DBClusterOptionGroupMemberships = f20
	ko.Status.DBClusterParameterGroup = resp.DBCluster.DBClusterParameterGroup
	ko.Status.DBSubnetGroup = resp.DBCluster.DBSubnetGroup
	ko.Status.DBClusterResourceID = resp.DBCluster.DbClusterResourceId
	f26 := []*svcapitypes.DomainMembership{}
	for _, f26iter := range resp.DBCluster.DomainMemberships {
		f26elem := &svcapitypes.DomainMembership{}
		f26elem.Domain = f26iter.Domain
		f26elem.FQDN = f26iter.FQDN
		f26elem.IAMRoleName = f26iter.IAMRoleName
		f26elem.Status = f26iter.Status
		f26 = append(f26, f26elem)
	}
	ko.Status.DomainMemberships = f26
	ko.Status.EarliestBacktrackTime = &metav1.Time{*resp.DBCluster.EarliestBacktrackTime}
	ko.Status.EarliestRestorableTime = &metav1.Time{*resp.DBCluster.EarliestRestorableTime}
	f29 := []*string{}
	for _, f29iter := range resp.DBCluster.EnabledCloudwatchLogsExports {
		var f29elem string
		f29elem = *f29iter
		f29 = append(f29, &f29elem)
	}
	ko.Status.EnabledCloudwatchLogsExports = f29
	ko.Status.Endpoint = resp.DBCluster.Endpoint
	ko.Status.GlobalWriteForwardingRequested = resp.DBCluster.GlobalWriteForwardingRequested
	ko.Status.GlobalWriteForwardingStatus = resp.DBCluster.GlobalWriteForwardingStatus
	ko.Status.HostedZoneID = resp.DBCluster.HostedZoneId
	ko.Status.HTTPEndpointEnabled = resp.DBCluster.HttpEndpointEnabled
	ko.Status.IAMDatabaseAuthenticationEnabled = resp.DBCluster.IAMDatabaseAuthenticationEnabled
	ko.Status.LatestRestorableTime = &metav1.Time{*resp.DBCluster.LatestRestorableTime}
	ko.Status.MultiAZ = resp.DBCluster.MultiAZ
	ko.Status.PercentProgress = resp.DBCluster.PercentProgress
	f47 := []*string{}
	for _, f47iter := range resp.DBCluster.ReadReplicaIdentifiers {
		var f47elem string
		f47elem = *f47iter
		f47 = append(f47, &f47elem)
	}
	ko.Status.ReadReplicaIdentifiers = f47
	ko.Status.ReaderEndpoint = resp.DBCluster.ReaderEndpoint
	f50 := &svcapitypes.ScalingConfigurationInfo{}
	f50.AutoPause = resp.DBCluster.ScalingConfigurationInfo.AutoPause
	f50.MaxCapacity = resp.DBCluster.ScalingConfigurationInfo.MaxCapacity
	f50.MinCapacity = resp.DBCluster.ScalingConfigurationInfo.MinCapacity
	f50.SecondsUntilAutoPause = resp.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause
	f50.TimeoutAction = resp.DBCluster.ScalingConfigurationInfo.TimeoutAction
	ko.Status.ScalingConfigurationInfo = f50
	ko.Status.Status = resp.DBCluster.Status
	f53 := []*svcapitypes.VpcSecurityGroupMembership{}
	for _, f53iter := range resp.DBCluster.VpcSecurityGroups {
		f53elem := &svcapitypes.VpcSecurityGroupMembership{}
		f53elem.Status = f53iter.Status
		f53elem.VPCSecurityGroupID = f53iter.VpcSecurityGroupId
		f53 = append(f53, f53elem)
	}
	ko.Status.VPCSecurityGroups = f53

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateDBClusterInput, error) {
	res := &svcsdk.CreateDBClusterInput{}

	f0 := []*string{}
	for _, f0iter := range r.ko.Spec.AvailabilityZones {
		var f0elem string
		f0elem = *f0iter
		f0 = append(f0, &f0elem)
	}
	res.SetAvailabilityZones(f0)
	res.SetBacktrackWindow(*r.ko.Spec.BacktrackWindow)
	res.SetBackupRetentionPeriod(*r.ko.Spec.BackupRetentionPeriod)
	res.SetCharacterSetName(*r.ko.Spec.CharacterSetName)
	res.SetCopyTagsToSnapshot(*r.ko.Spec.CopyTagsToSnapshot)
	res.SetDBClusterIdentifier(*r.ko.Spec.DBClusterIdentifier)
	res.SetDBClusterParameterGroupName(*r.ko.Spec.DBClusterParameterGroupName)
	res.SetDBSubnetGroupName(*r.ko.Spec.DBSubnetGroupName)
	res.SetDatabaseName(*r.ko.Spec.DatabaseName)
	res.SetDeletionProtection(*r.ko.Spec.DeletionProtection)
	res.SetDestinationRegion(*r.ko.Spec.DestinationRegion)
	res.SetDomain(*r.ko.Spec.Domain)
	res.SetDomainIAMRoleName(*r.ko.Spec.DomainIAMRoleName)
	f13 := []*string{}
	for _, f13iter := range r.ko.Spec.EnableCloudwatchLogsExports {
		var f13elem string
		f13elem = *f13iter
		f13 = append(f13, &f13elem)
	}
	res.SetEnableCloudwatchLogsExports(f13)
	res.SetEnableGlobalWriteForwarding(*r.ko.Spec.EnableGlobalWriteForwarding)
	res.SetEnableHttpEndpoint(*r.ko.Spec.EnableHTTPEndpoint)
	res.SetEnableIAMDatabaseAuthentication(*r.ko.Spec.EnableIAMDatabaseAuthentication)
	res.SetEngine(*r.ko.Spec.Engine)
	res.SetEngineMode(*r.ko.Spec.EngineMode)
	res.SetEngineVersion(*r.ko.Spec.EngineVersion)
	res.SetGlobalClusterIdentifier(*r.ko.Spec.GlobalClusterIdentifier)
	res.SetKmsKeyId(*r.ko.Spec.KMSKeyID)
	f22 := *k8s.SecretReference
	f22.MasterUserPassword = *r.ko.Spec.MasterUserPassword
	res.MasterUserPassword = *f22
	res.SetMasterUsername(*r.ko.Spec.MasterUsername)
	res.SetOptionGroupName(*r.ko.Spec.OptionGroupName)
	res.SetPort(*r.ko.Spec.Port)
	res.SetPreSignedUrl(*r.ko.Spec.PreSignedURL)
	res.SetPreferredBackupWindow(*r.ko.Spec.PreferredBackupWindow)
	res.SetPreferredMaintenanceWindow(*r.ko.Spec.PreferredMaintenanceWindow)
	res.SetReplicationSourceIdentifier(*r.ko.Spec.ReplicationSourceIdentifier)
	f30 := &svcsdk.ScalingConfiguration{}
	f30.SetAutoPause(*r.ko.Spec.ScalingConfiguration.AutoPause)
	f30.SetMaxCapacity(*r.ko.Spec.ScalingConfiguration.MaxCapacity)
	f30.SetMinCapacity(*r.ko.Spec.ScalingConfiguration.MinCapacity)
	f30.SetSecondsUntilAutoPause(*r.ko.Spec.ScalingConfiguration.SecondsUntilAutoPause)
	f30.SetTimeoutAction(*r.ko.Spec.ScalingConfiguration.TimeoutAction)
	res.SetScalingConfiguration(f30)
	res.SetSourceRegion(*r.ko.Spec.SourceRegion)
	res.SetStorageEncrypted(*r.ko.Spec.StorageEncrypted)
	f33 := []*svcsdk.Tag{}
	for _, f33iter := range r.ko.Spec.Tags {
		f33elem := &svcsdk.Tag{}
		f33elem.SetKey(*f33iter.Key)
		f33elem.SetValue(*f33iter.Value)
		f33 = append(f33, f33elem)
	}
	res.SetTags(f33)
	f34 := []*string{}
	for _, f34iter := range r.ko.Spec.VPCSecurityGroupIDs {
		var f34elem string
		f34elem = *f34iter
		f34 = append(f34, &f34elem)
	}
	res.SetVpcSecurityGroupIds(f34)

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newUpdateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.ModifyDBClusterWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	ko.Status.ActivityStreamKinesisStreamName = resp.DBCluster.ActivityStreamKinesisStreamName
	ko.Status.ActivityStreamKMSKeyID = resp.DBCluster.ActivityStreamKmsKeyId
	ko.Status.ActivityStreamMode = resp.DBCluster.ActivityStreamMode
	ko.Status.ActivityStreamStatus = resp.DBCluster.ActivityStreamStatus
	ko.Status.AllocatedStorage = resp.DBCluster.AllocatedStorage
	f5 := []*svcapitypes.DBClusterRole{}
	for _, f5iter := range resp.DBCluster.AssociatedRoles {
		f5elem := &svcapitypes.DBClusterRole{}
		f5elem.FeatureName = f5iter.FeatureName
		f5elem.RoleARN = f5iter.RoleArn
		f5elem.Status = f5iter.Status
		f5 = append(f5, f5elem)
	}
	ko.Status.AssociatedRoles = f5
	ko.Status.BacktrackConsumedChangeRecords = resp.DBCluster.BacktrackConsumedChangeRecords
	ko.Status.Capacity = resp.DBCluster.Capacity
	ko.Status.CloneGroupID = resp.DBCluster.CloneGroupId
	ko.Status.ClusterCreateTime = &metav1.Time{*resp.DBCluster.ClusterCreateTime}
	ko.Status.CrossAccountClone = resp.DBCluster.CrossAccountClone
	f16 := []*string{}
	for _, f16iter := range resp.DBCluster.CustomEndpoints {
		var f16elem string
		f16elem = *f16iter
		f16 = append(f16, &f16elem)
	}
	ko.Status.CustomEndpoints = f16
	f19 := []*svcapitypes.DBClusterMember{}
	for _, f19iter := range resp.DBCluster.DBClusterMembers {
		f19elem := &svcapitypes.DBClusterMember{}
		f19elem.DBClusterParameterGroupStatus = f19iter.DBClusterParameterGroupStatus
		f19elem.DBInstanceIdentifier = f19iter.DBInstanceIdentifier
		f19elem.IsClusterWriter = f19iter.IsClusterWriter
		f19elem.PromotionTier = f19iter.PromotionTier
		f19 = append(f19, f19elem)
	}
	ko.Status.DBClusterMembers = f19
	f20 := []*svcapitypes.DBClusterOptionGroupStatus{}
	for _, f20iter := range resp.DBCluster.DBClusterOptionGroupMemberships {
		f20elem := &svcapitypes.DBClusterOptionGroupStatus{}
		f20elem.DBClusterOptionGroupName = f20iter.DBClusterOptionGroupName
		f20elem.Status = f20iter.Status
		f20 = append(f20, f20elem)
	}
	ko.Status.DBClusterOptionGroupMemberships = f20
	ko.Status.DBClusterParameterGroup = resp.DBCluster.DBClusterParameterGroup
	ko.Status.DBSubnetGroup = resp.DBCluster.DBSubnetGroup
	ko.Status.DBClusterResourceID = resp.DBCluster.DbClusterResourceId
	f26 := []*svcapitypes.DomainMembership{}
	for _, f26iter := range resp.DBCluster.DomainMemberships {
		f26elem := &svcapitypes.DomainMembership{}
		f26elem.Domain = f26iter.Domain
		f26elem.FQDN = f26iter.FQDN
		f26elem.IAMRoleName = f26iter.IAMRoleName
		f26elem.Status = f26iter.Status
		f26 = append(f26, f26elem)
	}
	ko.Status.DomainMemberships = f26
	ko.Status.EarliestBacktrackTime = &metav1.Time{*resp.DBCluster.EarliestBacktrackTime}
	ko.Status.EarliestRestorableTime = &metav1.Time{*resp.DBCluster.EarliestRestorableTime}
	f29 := []*string{}
	for _, f29iter := range resp.DBCluster.EnabledCloudwatchLogsExports {
		var f29elem string
		f29elem = *f29iter
		f29 = append(f29, &f29elem)
	}
	ko.Status.EnabledCloudwatchLogsExports = f29
	ko.Status.Endpoint = resp.DBCluster.Endpoint
	ko.Status.GlobalWriteForwardingRequested = resp.DBCluster.GlobalWriteForwardingRequested
	ko.Status.GlobalWriteForwardingStatus = resp.DBCluster.GlobalWriteForwardingStatus
	ko.Status.HostedZoneID = resp.DBCluster.HostedZoneId
	ko.Status.HTTPEndpointEnabled = resp.DBCluster.HttpEndpointEnabled
	ko.Status.IAMDatabaseAuthenticationEnabled = resp.DBCluster.IAMDatabaseAuthenticationEnabled
	ko.Status.LatestRestorableTime = &metav1.Time{*resp.DBCluster.LatestRestorableTime}
	ko.Status.MultiAZ = resp.DBCluster.MultiAZ
	ko.Status.PercentProgress = resp.DBCluster.PercentProgress
	f47 := []*string{}
	for _, f47iter := range resp.DBCluster.ReadReplicaIdentifiers {
		var f47elem string
		f47elem = *f47iter
		f47 = append(f47, &f47elem)
	}
	ko.Status.ReadReplicaIdentifiers = f47
	ko.Status.ReaderEndpoint = resp.DBCluster.ReaderEndpoint
	f50 := &svcapitypes.ScalingConfigurationInfo{}
	f50.AutoPause = resp.DBCluster.ScalingConfigurationInfo.AutoPause
	f50.MaxCapacity = resp.DBCluster.ScalingConfigurationInfo.MaxCapacity
	f50.MinCapacity = resp.DBCluster.ScalingConfigurationInfo.MinCapacity
	f50.SecondsUntilAutoPause = resp.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause
	f50.TimeoutAction = resp.DBCluster.ScalingConfigurationInfo.TimeoutAction
	ko.Status.ScalingConfigurationInfo = f50
	ko.Status.Status = resp.DBCluster.Status
	f53 := []*svcapitypes.VpcSecurityGroupMembership{}
	for _, f53iter := range resp.DBCluster.VpcSecurityGroups {
		f53elem := &svcapitypes.VpcSecurityGroupMembership{}
		f53elem.Status = f53iter.Status
		f53elem.VPCSecurityGroupID = f53iter.VpcSecurityGroupId
		f53 = append(f53, f53elem)
	}
	ko.Status.VPCSecurityGroups = f53

	return &resource{ko}, nil
}
// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.ModifyDBClusterInput, error) {
	res := &svcsdk.ModifyDBClusterInput{}

	res.SetBacktrackWindow(*r.ko.Spec.BacktrackWindow)
	res.SetBackupRetentionPeriod(*r.ko.Spec.BackupRetentionPeriod)
	res.SetCopyTagsToSnapshot(*r.ko.Spec.CopyTagsToSnapshot)
	res.SetDBClusterIdentifier(*r.ko.Spec.DBClusterIdentifier)
	res.SetDBClusterParameterGroupName(*r.ko.Spec.DBClusterParameterGroupName)
	res.SetDeletionProtection(*r.ko.Spec.DeletionProtection)
	res.SetDomain(*r.ko.Spec.Domain)
	res.SetDomainIAMRoleName(*r.ko.Spec.DomainIAMRoleName)
	res.SetEnableGlobalWriteForwarding(*r.ko.Spec.EnableGlobalWriteForwarding)
	res.SetEnableHttpEndpoint(*r.ko.Spec.EnableHTTPEndpoint)
	res.SetEnableIAMDatabaseAuthentication(*r.ko.Spec.EnableIAMDatabaseAuthentication)
	res.SetEngineVersion(*r.ko.Spec.EngineVersion)
	f16 := *k8s.SecretReference
	f16.MasterUserPassword = *r.ko.Spec.MasterUserPassword
	res.MasterUserPassword = *f16
	res.SetOptionGroupName(*r.ko.Spec.OptionGroupName)
	res.SetPort(*r.ko.Spec.Port)
	res.SetPreferredBackupWindow(*r.ko.Spec.PreferredBackupWindow)
	res.SetPreferredMaintenanceWindow(*r.ko.Spec.PreferredMaintenanceWindow)
	f22 := &svcsdk.ScalingConfiguration{}
	f22.SetAutoPause(*r.ko.Spec.ScalingConfiguration.AutoPause)
	f22.SetMaxCapacity(*r.ko.Spec.ScalingConfiguration.MaxCapacity)
	f22.SetMinCapacity(*r.ko.Spec.ScalingConfiguration.MinCapacity)
	f22.SetSecondsUntilAutoPause(*r.ko.Spec.ScalingConfiguration.SecondsUntilAutoPause)
	f22.SetTimeoutAction(*r.ko.Spec.ScalingConfiguration.TimeoutAction)
	res.SetScalingConfiguration(f22)
	f23 := []*string{}
	for _, f23iter := range r.ko.Spec.VPCSecurityGroupIDs {
		var f23elem string
		f23elem = *f23iter
		f23 = append(f23, &f23elem)
	}
	res.SetVpcSecurityGroupIds(f23)

	return res, nil
}


// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteDBClusterWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDBClusterInput, error) {
	res := &svcsdk.DeleteDBClusterInput{}

	res.SetDBClusterIdentifier(*r.ko.Spec.DBClusterIdentifier)

	return res, nil
}