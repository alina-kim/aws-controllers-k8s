// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package option_group

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/rds/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.RDS{}
	_ = &svcapitypes.OptionGroup{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// TODO(jaypipes): Map out the ReadMany codepath

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()
	return &resource{ko}, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateOptionGroupWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	ko.Status.AllowsVPCAndNonVPCInstanceMemberships = resp.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships
	f6 := []*svcapitypes.Option{}
	for _, f6iter := range resp.OptionGroup.Options {
		f6elem := &svcapitypes.Option{}
		f6elemf0 := []*svcapitypes.DBSecurityGroupMembership{}
		for _, f6elemf0iter := range f6iter.DBSecurityGroupMemberships {
			f6elemf0elem := &svcapitypes.DBSecurityGroupMembership{}
			f6elemf0elem.DBSecurityGroupName = f6elemf0iter.DBSecurityGroupName
			f6elemf0elem.Status = f6elemf0iter.Status
			f6elemf0 = append(f6elemf0, f6elemf0elem)
		}
		f6elem.DBSecurityGroupMemberships = f6elemf0
		f6elem.OptionDescription = f6iter.OptionDescription
		f6elem.OptionName = f6iter.OptionName
		f6elemf3 := []*svcapitypes.OptionSetting{}
		for _, f6elemf3iter := range f6iter.OptionSettings {
			f6elemf3elem := &svcapitypes.OptionSetting{}
			f6elemf3elem.AllowedValues = f6elemf3iter.AllowedValues
			f6elemf3elem.ApplyType = f6elemf3iter.ApplyType
			f6elemf3elem.DataType = f6elemf3iter.DataType
			f6elemf3elem.DefaultValue = f6elemf3iter.DefaultValue
			f6elemf3elem.Description = f6elemf3iter.Description
			f6elemf3elem.IsCollection = f6elemf3iter.IsCollection
			f6elemf3elem.IsModifiable = f6elemf3iter.IsModifiable
			f6elemf3elem.Name = f6elemf3iter.Name
			f6elemf3elem.Value = f6elemf3iter.Value
			f6elemf3 = append(f6elemf3, f6elemf3elem)
		}
		f6elem.OptionSettings = f6elemf3
		f6elem.OptionVersion = f6iter.OptionVersion
		f6elem.Permanent = f6iter.Permanent
		f6elem.Persistent = f6iter.Persistent
		f6elem.Port = f6iter.Port
		f6elemf8 := []*svcapitypes.VpcSecurityGroupMembership{}
		for _, f6elemf8iter := range f6iter.VpcSecurityGroupMemberships {
			f6elemf8elem := &svcapitypes.VpcSecurityGroupMembership{}
			f6elemf8elem.Status = f6elemf8iter.Status
			f6elemf8elem.VPCSecurityGroupID = f6elemf8iter.VpcSecurityGroupId
			f6elemf8 = append(f6elemf8, f6elemf8elem)
		}
		f6elem.VPCSecurityGroupMemberships = f6elemf8
		f6 = append(f6, f6elem)
	}
	ko.Status.Options = f6
	ko.Status.VPCID = resp.OptionGroup.VpcId

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateOptionGroupInput, error) {
	res := &svcsdk.CreateOptionGroupInput{}

	res.SetEngineName(*r.ko.Spec.EngineName)
	res.SetMajorEngineVersion(*r.ko.Spec.MajorEngineVersion)
	res.SetOptionGroupDescription(*r.ko.Spec.OptionGroupDescription)
	res.SetOptionGroupName(*r.ko.Spec.OptionGroupName)
	f4 := []*svcsdk.Tag{}
	for _, f4iter := range r.ko.Spec.Tags {
		f4elem := &svcsdk.Tag{}
		f4elem.SetKey(*f4iter.Key)
		f4elem.SetValue(*f4iter.Value)
		f4 = append(f4, f4elem)
	}
	res.SetTags(f4)

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newUpdateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.ModifyOptionGroupWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	ko.Status.AllowsVPCAndNonVPCInstanceMemberships = resp.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships
	f6 := []*svcapitypes.Option{}
	for _, f6iter := range resp.OptionGroup.Options {
		f6elem := &svcapitypes.Option{}
		f6elemf0 := []*svcapitypes.DBSecurityGroupMembership{}
		for _, f6elemf0iter := range f6iter.DBSecurityGroupMemberships {
			f6elemf0elem := &svcapitypes.DBSecurityGroupMembership{}
			f6elemf0elem.DBSecurityGroupName = f6elemf0iter.DBSecurityGroupName
			f6elemf0elem.Status = f6elemf0iter.Status
			f6elemf0 = append(f6elemf0, f6elemf0elem)
		}
		f6elem.DBSecurityGroupMemberships = f6elemf0
		f6elem.OptionDescription = f6iter.OptionDescription
		f6elem.OptionName = f6iter.OptionName
		f6elemf3 := []*svcapitypes.OptionSetting{}
		for _, f6elemf3iter := range f6iter.OptionSettings {
			f6elemf3elem := &svcapitypes.OptionSetting{}
			f6elemf3elem.AllowedValues = f6elemf3iter.AllowedValues
			f6elemf3elem.ApplyType = f6elemf3iter.ApplyType
			f6elemf3elem.DataType = f6elemf3iter.DataType
			f6elemf3elem.DefaultValue = f6elemf3iter.DefaultValue
			f6elemf3elem.Description = f6elemf3iter.Description
			f6elemf3elem.IsCollection = f6elemf3iter.IsCollection
			f6elemf3elem.IsModifiable = f6elemf3iter.IsModifiable
			f6elemf3elem.Name = f6elemf3iter.Name
			f6elemf3elem.Value = f6elemf3iter.Value
			f6elemf3 = append(f6elemf3, f6elemf3elem)
		}
		f6elem.OptionSettings = f6elemf3
		f6elem.OptionVersion = f6iter.OptionVersion
		f6elem.Permanent = f6iter.Permanent
		f6elem.Persistent = f6iter.Persistent
		f6elem.Port = f6iter.Port
		f6elemf8 := []*svcapitypes.VpcSecurityGroupMembership{}
		for _, f6elemf8iter := range f6iter.VpcSecurityGroupMemberships {
			f6elemf8elem := &svcapitypes.VpcSecurityGroupMembership{}
			f6elemf8elem.Status = f6elemf8iter.Status
			f6elemf8elem.VPCSecurityGroupID = f6elemf8iter.VpcSecurityGroupId
			f6elemf8 = append(f6elemf8, f6elemf8elem)
		}
		f6elem.VPCSecurityGroupMemberships = f6elemf8
		f6 = append(f6, f6elem)
	}
	ko.Status.Options = f6
	ko.Status.VPCID = resp.OptionGroup.VpcId

	return &resource{ko}, nil
}
// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.ModifyOptionGroupInput, error) {
	res := &svcsdk.ModifyOptionGroupInput{}

	res.SetOptionGroupName(*r.ko.Spec.OptionGroupName)

	return res, nil
}


// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteOptionGroupWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteOptionGroupInput, error) {
	res := &svcsdk.DeleteOptionGroupInput{}

	res.SetOptionGroupName(*r.ko.Spec.OptionGroupName)

	return res, nil
}