// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package event_subscr_ip_tion

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/rds/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.RDS{}
	_ = &svcapitypes.EventSubscription{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// TODO(jaypipes): Map out the ReadMany codepath

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()
	return &resource{ko}, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateEventSubscriptionWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	ko.Status.CustSubscriptionID = resp.EventSubscription.CustSubscriptionId
	ko.Status.CustomerAWSID = resp.EventSubscription.CustomerAwsId
	f3 := []*string{}
	for _, f3iter := range resp.EventSubscription.EventCategoriesList {
		var f3elem string
		f3elem = *f3iter
		f3 = append(f3, &f3elem)
	}
	ko.Status.EventCategoriesList = f3
	f6 := []*string{}
	for _, f6iter := range resp.EventSubscription.SourceIdsList {
		var f6elem string
		f6elem = *f6iter
		f6 = append(f6, &f6elem)
	}
	ko.Status.SourceIDsList = f6
	ko.Status.Status = resp.EventSubscription.Status
	ko.Status.SubscriptionCreationTime = resp.EventSubscription.SubscriptionCreationTime

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateEventSubscriptionInput, error) {
	res := &svcsdk.CreateEventSubscriptionInput{}

	res.SetEnabled(*r.ko.Spec.Enabled)
	f1 := []*string{}
	for _, f1iter := range r.ko.Spec.EventCategories {
		var f1elem string
		f1elem = *f1iter
		f1 = append(f1, &f1elem)
	}
	res.SetEventCategories(f1)
	res.SetSnsTopicArn(*r.ko.Spec.SnsTopicARN)
	f3 := []*string{}
	for _, f3iter := range r.ko.Spec.SourceIDs {
		var f3elem string
		f3elem = *f3iter
		f3 = append(f3, &f3elem)
	}
	res.SetSourceIds(f3)
	res.SetSourceType(*r.ko.Spec.SourceType)
	res.SetSubscriptionName(*r.ko.Spec.SubscriptionName)
	f6 := []*svcsdk.Tag{}
	for _, f6iter := range r.ko.Spec.Tags {
		f6elem := &svcsdk.Tag{}
		f6elem.SetKey(*f6iter.Key)
		f6elem.SetValue(*f6iter.Value)
		f6 = append(f6, f6elem)
	}
	res.SetTags(f6)

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newUpdateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.ModifyEventSubscriptionWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	ko.Status.CustSubscriptionID = resp.EventSubscription.CustSubscriptionId
	ko.Status.CustomerAWSID = resp.EventSubscription.CustomerAwsId
	f3 := []*string{}
	for _, f3iter := range resp.EventSubscription.EventCategoriesList {
		var f3elem string
		f3elem = *f3iter
		f3 = append(f3, &f3elem)
	}
	ko.Status.EventCategoriesList = f3
	f6 := []*string{}
	for _, f6iter := range resp.EventSubscription.SourceIdsList {
		var f6elem string
		f6elem = *f6iter
		f6 = append(f6, &f6elem)
	}
	ko.Status.SourceIDsList = f6
	ko.Status.Status = resp.EventSubscription.Status
	ko.Status.SubscriptionCreationTime = resp.EventSubscription.SubscriptionCreationTime

	return &resource{ko}, nil
}
// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.ModifyEventSubscriptionInput, error) {
	res := &svcsdk.ModifyEventSubscriptionInput{}

	res.SetEnabled(*r.ko.Spec.Enabled)
	f1 := []*string{}
	for _, f1iter := range r.ko.Spec.EventCategories {
		var f1elem string
		f1elem = *f1iter
		f1 = append(f1, &f1elem)
	}
	res.SetEventCategories(f1)
	res.SetSnsTopicArn(*r.ko.Spec.SnsTopicARN)
	res.SetSourceType(*r.ko.Spec.SourceType)
	res.SetSubscriptionName(*r.ko.Spec.SubscriptionName)

	return res, nil
}


// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteEventSubscriptionWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteEventSubscriptionInput, error) {
	res := &svcsdk.DeleteEventSubscriptionInput{}

	res.SetSubscriptionName(*r.ko.Spec.SubscriptionName)

	return res, nil
}