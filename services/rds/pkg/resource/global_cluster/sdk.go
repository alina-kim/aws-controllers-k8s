// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package global_cluster

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/rds/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.RDS{}
	_ = &svcapitypes.GlobalCluster{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// TODO(jaypipes): Map out the ReadMany codepath

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()
	return &resource{ko}, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateGlobalClusterWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	f6 := []*svcapitypes.GlobalClusterMember{}
	for _, f6iter := range resp.GlobalCluster.GlobalClusterMembers {
		f6elem := &svcapitypes.GlobalClusterMember{}
		f6elem.DBClusterARN = f6iter.DBClusterArn
		f6elem.GlobalWriteForwardingStatus = f6iter.GlobalWriteForwardingStatus
		f6elem.IsWriter = f6iter.IsWriter
		f6elemf3 := []*string{}
		for _, f6elemf3iter := range f6iter.Readers {
			var f6elemf3elem string
			f6elemf3elem = *f6elemf3iter
			f6elemf3 = append(f6elemf3, &f6elemf3elem)
		}
		f6elem.Readers = f6elemf3
		f6 = append(f6, f6elem)
	}
	ko.Status.GlobalClusterMembers = f6
	ko.Status.GlobalClusterResourceID = resp.GlobalCluster.GlobalClusterResourceId
	ko.Status.Status = resp.GlobalCluster.Status

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateGlobalClusterInput, error) {
	res := &svcsdk.CreateGlobalClusterInput{}

	res.SetDatabaseName(*r.ko.Spec.DatabaseName)
	res.SetDeletionProtection(*r.ko.Spec.DeletionProtection)
	res.SetEngine(*r.ko.Spec.Engine)
	res.SetEngineVersion(*r.ko.Spec.EngineVersion)
	res.SetGlobalClusterIdentifier(*r.ko.Spec.GlobalClusterIdentifier)
	res.SetSourceDBClusterIdentifier(*r.ko.Spec.SourceDBClusterIdentifier)
	res.SetStorageEncrypted(*r.ko.Spec.StorageEncrypted)

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newUpdateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.ModifyGlobalClusterWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	f6 := []*svcapitypes.GlobalClusterMember{}
	for _, f6iter := range resp.GlobalCluster.GlobalClusterMembers {
		f6elem := &svcapitypes.GlobalClusterMember{}
		f6elem.DBClusterARN = f6iter.DBClusterArn
		f6elem.GlobalWriteForwardingStatus = f6iter.GlobalWriteForwardingStatus
		f6elem.IsWriter = f6iter.IsWriter
		f6elemf3 := []*string{}
		for _, f6elemf3iter := range f6iter.Readers {
			var f6elemf3elem string
			f6elemf3elem = *f6elemf3iter
			f6elemf3 = append(f6elemf3, &f6elemf3elem)
		}
		f6elem.Readers = f6elemf3
		f6 = append(f6, f6elem)
	}
	ko.Status.GlobalClusterMembers = f6
	ko.Status.GlobalClusterResourceID = resp.GlobalCluster.GlobalClusterResourceId
	ko.Status.Status = resp.GlobalCluster.Status

	return &resource{ko}, nil
}
// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.ModifyGlobalClusterInput, error) {
	res := &svcsdk.ModifyGlobalClusterInput{}

	res.SetDeletionProtection(*r.ko.Spec.DeletionProtection)
	res.SetGlobalClusterIdentifier(*r.ko.Spec.GlobalClusterIdentifier)

	return res, nil
}


// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteGlobalClusterWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteGlobalClusterInput, error) {
	res := &svcsdk.DeleteGlobalClusterInput{}

	res.SetGlobalClusterIdentifier(*r.ko.Spec.GlobalClusterIdentifier)

	return res, nil
}