// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package db_subnet_group

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/rds/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.RDS{}
	_ = &svcapitypes.DBSubnetGroup{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// TODO(jaypipes): Map out the ReadMany codepath

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()
	return &resource{ko}, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateDBSubnetGroupWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	ko.Status.SubnetGroupStatus = resp.DBSubnetGroup.SubnetGroupStatus
	f4 := []*svcapitypes.Subnet{}
	for _, f4iter := range resp.DBSubnetGroup.Subnets {
		f4elem := &svcapitypes.Subnet{}
		f4elemf0 := &svcapitypes.AvailabilityZone{}
		f4elemf0.Name = f4iter.SubnetAvailabilityZone.Name
		f4elem.SubnetAvailabilityZone = f4elemf0
		f4elem.SubnetIdentifier = f4iter.SubnetIdentifier
		f4elemf2 := &svcapitypes.Outpost{}
		f4elemf2.ARN = f4iter.SubnetOutpost.Arn
		f4elem.SubnetOutpost = f4elemf2
		f4elem.SubnetStatus = f4iter.SubnetStatus
		f4 = append(f4, f4elem)
	}
	ko.Status.Subnets = f4
	ko.Status.VPCID = resp.DBSubnetGroup.VpcId

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateDBSubnetGroupInput, error) {
	res := &svcsdk.CreateDBSubnetGroupInput{}

	res.SetDBSubnetGroupDescription(*r.ko.Spec.DBSubnetGroupDescription)
	res.SetDBSubnetGroupName(*r.ko.Spec.DBSubnetGroupName)
	f2 := []*string{}
	for _, f2iter := range r.ko.Spec.SubnetIDs {
		var f2elem string
		f2elem = *f2iter
		f2 = append(f2, &f2elem)
	}
	res.SetSubnetIds(f2)
	f3 := []*svcsdk.Tag{}
	for _, f3iter := range r.ko.Spec.Tags {
		f3elem := &svcsdk.Tag{}
		f3elem.SetKey(*f3iter.Key)
		f3elem.SetValue(*f3iter.Value)
		f3 = append(f3, f3elem)
	}
	res.SetTags(f3)

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newUpdateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.ModifyDBSubnetGroupWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	ko.Status.SubnetGroupStatus = resp.DBSubnetGroup.SubnetGroupStatus
	f4 := []*svcapitypes.Subnet{}
	for _, f4iter := range resp.DBSubnetGroup.Subnets {
		f4elem := &svcapitypes.Subnet{}
		f4elemf0 := &svcapitypes.AvailabilityZone{}
		f4elemf0.Name = f4iter.SubnetAvailabilityZone.Name
		f4elem.SubnetAvailabilityZone = f4elemf0
		f4elem.SubnetIdentifier = f4iter.SubnetIdentifier
		f4elemf2 := &svcapitypes.Outpost{}
		f4elemf2.ARN = f4iter.SubnetOutpost.Arn
		f4elem.SubnetOutpost = f4elemf2
		f4elem.SubnetStatus = f4iter.SubnetStatus
		f4 = append(f4, f4elem)
	}
	ko.Status.Subnets = f4
	ko.Status.VPCID = resp.DBSubnetGroup.VpcId

	return &resource{ko}, nil
}
// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.ModifyDBSubnetGroupInput, error) {
	res := &svcsdk.ModifyDBSubnetGroupInput{}

	res.SetDBSubnetGroupDescription(*r.ko.Spec.DBSubnetGroupDescription)
	res.SetDBSubnetGroupName(*r.ko.Spec.DBSubnetGroupName)
	f2 := []*string{}
	for _, f2iter := range r.ko.Spec.SubnetIDs {
		var f2elem string
		f2elem = *f2iter
		f2 = append(f2, &f2elem)
	}
	res.SetSubnetIds(f2)

	return res, nil
}


// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteDBSubnetGroupWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDBSubnetGroupInput, error) {
	res := &svcsdk.DeleteDBSubnetGroupInput{}

	res.SetDBSubnetGroupName(*r.ko.Spec.DBSubnetGroupName)

	return res, nil
}