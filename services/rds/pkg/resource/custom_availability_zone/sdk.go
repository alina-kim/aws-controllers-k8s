// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package custom_availability_zone

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/rds/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.RDS{}
	_ = &svcapitypes.CustomAvailabilityZone{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// TODO(jaypipes): Map out the ReadMany codepath

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()
	return &resource{ko}, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateCustomAvailabilityZoneWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	ko.Status.CustomAvailabilityZoneID = resp.CustomAvailabilityZone.CustomAvailabilityZoneId
	ko.Status.CustomAvailabilityZoneStatus = resp.CustomAvailabilityZone.CustomAvailabilityZoneStatus
	f3 := &svcapitypes.VpnDetails{}
	f3.VPNGatewayIP = resp.CustomAvailabilityZone.VpnDetails.VpnGatewayIp
	f3.VPNID = resp.CustomAvailabilityZone.VpnDetails.VpnId
	f3.VPNName = resp.CustomAvailabilityZone.VpnDetails.VpnName
	f3.VPNPSK = resp.CustomAvailabilityZone.VpnDetails.VpnPSK
	f3.VPNState = resp.CustomAvailabilityZone.VpnDetails.VpnState
	f3.VPNTunnelOriginatorIP = resp.CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP
	ko.Status.VPNDetails = f3

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateCustomAvailabilityZoneInput, error) {
	res := &svcsdk.CreateCustomAvailabilityZoneInput{}

	res.SetCustomAvailabilityZoneName(*r.ko.Spec.CustomAvailabilityZoneName)
	res.SetExistingVpnId(*r.ko.Spec.ExistingVPNID)
	res.SetNewVpnTunnelName(*r.ko.Spec.NewVPNTunnelName)
	res.SetVpnTunnelOriginatorIP(*r.ko.Spec.VPNTunnelOriginatorIP)

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteCustomAvailabilityZoneWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteCustomAvailabilityZoneInput, error) {
	res := &svcsdk.DeleteCustomAvailabilityZoneInput{}

	res.SetCustomAvailabilityZoneId(*r.ko.Status.CustomAvailabilityZoneID)

	return res, nil
}